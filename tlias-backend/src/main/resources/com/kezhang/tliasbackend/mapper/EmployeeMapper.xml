<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kezhang.tliasbackend.mapper.EmployeeMapper">
    <!-- 因为涉及到多表查询，所以将返回类型指定为DTO而不是entity，entity中的单表字段覆盖不了多表查询的结果-->
    <select id="selectAllEmployees" resultType="com.kezhang.tliasbackend.dto.EmployeeResponseDTO">
        SELECT
            e.id,
            e.name,
            e.gender,
            e.image,
            d.name AS departmentName,
            p.name AS jobTitle,
            e.entry_date,
            e.update_time
        FROM employee e
        LEFT JOIN department d ON e.department_id = d.id
        LEFT JOIN position p ON e.job_title = p.id
        ORDER BY e.update_time DESC;
    </select>

    <!-- 传统方式实现的分页查询 -->
    <!-- 因为涉及到多表查询，所以将返回类型指定为DTO而不是entity，entity中的单表字段覆盖不了多表查询的结果-->
<!--    <select id="selectAllEmployees" resultType="com.kezhang.tliasbackend.dto.EmployeeResponseDTO">-->
<!--        SELECT-->
<!--            e.username,-->
<!--            e.gender,-->
<!--            e.image,-->
<!--            d.name AS departmentName,-->
<!--            p.name AS jobTitle,-->
<!--            e.entry_date,-->
<!--            e.update_time-->
<!--        FROM employee e-->
<!--        LEFT JOIN department d ON e.department_id = d.id-->
<!--        LEFT JOIN position p ON e.job_title = p.id-->
<!--        LIMIT #{offset}, #{limit}-->
<!--        ORDER BY e.update_time DESC;-->
<!--    </select>-->
<!--    <select id="countAllEmployees" resultType="long">-->
<!--        SELECT COUNT(*)-->
<!--        FROM employee e-->
<!--        LEFT JOIN department d ON e.department_id = d.id;-->
<!--    </select>-->

    <!-- 使用PageHelper实现分页查询 -->
    <!-- 因为涉及到多表查询，所以将返回类型指定为DTO而不是entity，entity中的单表字段覆盖不了多表查询的结果-->
<!--    <select id="selectAllEmployees" resultType="com.kezhang.tliasbackend.dto.EmployeeResponseDTO">-->
<!--        SELECT-->
<!--            e.username,-->
<!--            e.gender,-->
<!--            e.image,-->
<!--            d.name AS departmentName,-->
<!--            p.name AS jobTitle,-->
<!--            e.job_title,-->
<!--            e.entry_date,-->
<!--            e.update_time-->
<!--        FROM employee e-->
<!--        LEFT JOIN department d ON e.department_id = d.id-->
<!--        LEFT JOIN position p ON e.job_title = p.id-->
<!--        ORDER BY e.update_time DESC-->
<!--&lt;!&ndash;        注意：这里注意不能有 ；分号，因为PageHelper拦截SQL之后会自动续上limit语句，分号会打断&ndash;&gt;&ndash;&gt;-->
<!--    </select>-->

    <!-- 使用PageHelper 和条件查询-->
    <!-- 因为涉及到多表查询，所以将返回类型指定为DTO而不是entity，entity中的单表字段覆盖不了多表查询的结果-->
    <select id="selectEmployeesByCondition" resultType="com.kezhang.tliasbackend.dto.EmployeeResponseDTO">
        SELECT
            e.id,
            e.name,
            e.gender,
            e.image,
            d.name AS departmentName,
            p.name AS jobTitle,
            e.entry_date,
            e.update_time
        FROM employee e
        LEFT JOIN department d ON e.department_id = d.id
        LEFT JOIN position p ON e.job_title = p.id
        <where>
            <if test="name != null and name != ''">
                AND e.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="gender != null">
                AND e.gender = #{gender}
            </if>
            <if test="startDate != null and endDate != null">
                AND e.entry_date BETWEEN #{startDate} AND #{endDate}
            </if>
        </where>
        ORDER BY e.update_time DESC
    </select>

    <!-- 插入多条员工记录 -->
    <insert id="insertEmployee" parameterType="com.kezhang.tliasbackend.entity.Employee" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO employee (username,name, gender, phone, job_title, department_id, salary, image, entry_date)
        VALUES
            (#{username}, #{name}, #{gender}, #{phone}, #{jobTitle}, #{departmentId}, #{salary}, #{image}, #{entryDate})
    </insert>

    <!-- 获取员工信息的image Urls 以供删除OSS-->
    <select id="getEmployeeImageUrlsByIds">
        SELECT image FROM employee
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <!-- 删除员工-->
    <delete id="deleteEmployeeByIds">
        DELETE FROM employee
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 员工信息回显-->
    <!-- 使用多表查询，并且手动指定ResultMap封装嵌套DTO（一条主表信息，多个员工经历信息组成的集合） -->
    <resultMap id="EmployeeDisplayDTOMap" type="com.kezhang.tliasbackend.dto.EmployeeUpdateDTO">
        <!--主表信息封装-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="phone" property="phone"/>
        <result column="job_title" property="jobTitle"/>
        <result column="department_id" property="departmentId"/>
        <result column="salary" property="salary"/>
        <result column="entry_date" property="entryDate"/>
        <result column="image" property="image"/>
        <!-- 嵌套集合 List<EmployeeHistoryUpdateDTO> 封装-->
        <collection property="employeeHistoryUpdateDTOList" ofType="com.kezhang.tliasbackend.dto.EmployeeHistoryUpdateDTO">
            <result column="start_date" property="startDate" />
            <result column="end_date" property="endDate" />
            <result column="previousJobTitle" property="jobTitle"/>
            <result column="previousCompanyName" property="companyName"/>
            <result column="employee_id" property="employeeId"/>
        </collection>
    </resultMap>
    <select id="selectEmployeeById" resultMap="EmployeeDisplayDTOMap">
        SELECT
            e.id,
            e.username,
            e.name,
            e.gender,
            e.phone,
            e.job_title,
            e.department_id,
            e.salary,
            e.entry_date,
            e.image,
            eh.start_date,
            eh.end_date,
            eh.job_title AS previousJobTitle,
            eh.company_name AS previousCompanyName,
            eh.employee_id
        FROM employee e
        LEFT JOIN employee_history eh ON e.id = eh.employee_id
        WHERE e.id = #{id}
    </select>

    <!-- 修改员工信息 -->
    <update id="updateEmployeeById" parameterType="com.kezhang.tliasbackend.entity.Employee">
        UPDATE employee
        <set>
            <if test="username != null and username != ''">
                username = #{username},</if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="jobTitle != null and jobTitle != ''">
                job_title = #{jobTitle},
            </if>
            <if test="departmentId != null">
                department_id = #{departmentId},
            </if>
            <if test="salary != null">
                salary = #{salary},
            </if>
            <if test="entryDate != null">
                entry_date = #{entryDate},
            </if>
            <if test="image != null and image != ''">
                image = #{image},
            </if>
        </set>
        WHERE id = #{id};
    </update>

    <!-- 根据employeeName 获取id，用于班级管理中的班主任关联 -->
    <select id="selectEmployeeIdByName">
        SELECT id FROM employee WHERE name = #{name};
    </select>

    <!-- 根据username和password 查询对应的员工 -->
    <select id="selectEmployeeByUsernameAndPassword" resultType="com.kezhang.tliasbackend.entity.Employee">
        SELECT
            id,
            name,
            username
        FROM employee
        WHERE username = #{username} AND password = #{password};
    </select>


</mapper>